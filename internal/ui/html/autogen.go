package html

import (
	"html/template"
)

func init() {
	var indexes = [][2]int{{0, 3507}, {3507, 4518}, {4518, 4733}, {4733, 5280}}
	var names = []string{"main.html", "mem.html", "stack.html", "sys.html"}
	const data = "<html>\n\t<head>\n\t\t<style>\n\t\t\t#menuButton {\n\t\t\t\tbackground-color: transparent;\n\t\t\t\tborder: thin solid gainsboro;\n\t\t\t\tfont-size: 1em;\n\t\t\t\tposition: fixed;\n\t\t\t\tdisplay: block;\n\t\t\t\tbottom: 12;\n\t\t\t\tleft: 12;\n\t\t\t\tpadding: 5px;\n\t\t\t\tcolor: rgba(0, 0, 0, 0.9);\n\t\t\t\ttext-decoration: none;\n\t\t\t\tuser-select: none;\n\t\t\t}\n\t\t\thtml,body,#frame {\n\t\t\t\tpadding: 0;\n\t\t\t\tmargin: 0;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\tborder: none;\n\t\t\t}\n\t\t\thtml{\n\t\t\t\toverflow: hidden;\n\t\t\t}\n\t\t\t.dropbtn {\n\t\t\t\tbackground-color: transparent;\n\t\t\t\tborder: thin solid gainsboro;\n\t\t\t\tfont-size: 14px;\n\t\t\t\tposition: fixed;\n\t\t\t\tdisplay: block;\n\t\t\t\tbottom: 12px;\n\t\t\t\tleft: 12px;\n\t\t\t\tpadding: 5px;\n\t\t\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\t\t\ttext-decoration: none;\n\t\t\t\tuser-select: none;\n\t\t\t}\n\t\t\t.dropdown {\n\t\t\t\tposition: relative;\n\t\t\t\tdisplay: inline-block;\n\t\t\t}\n\t\t\t.dropdown-content {\n\t\t\t\tdisplay: none;\n\t\t\t\tposition: fixed;\n\t\t\t\tfont-size: 13px;\n\t\t\t\tbottom: 40px;\n\t\t\t\tleft: 12px;\n\t\t\t\tbackground-color: rgba(255,255,255,1);\n\t\t\t\tbox-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);z-index: 1;}\n\t\t\t.dropdown-content a {\n\t\t\t\tcolor: black;\n\t\t\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\t\t\tpadding: 11px 13px;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t\t.dropdown-content a:hover {\n\t\t\t\tbackground-color: rgba(250,250,250,1);\n\t\t\t}\n\t\t\t.dropdown:hover .dropdown-content {\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t\t.dropdown:hover .dropbtn {\n\t\t\t\tbackground-color: rgba(250,250,250,1);\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<iframe src=\"\" frameborder=\"0\" id=\"frame\" name=\"frame\"></iframe>\n\t\t<div class=\"dropdown\">\n\t\t\t<button class=\"dropbtn\">View</button>\n\t\t\t<div class=\"dropdown-content\">\n\t\t\t\t{{range $page := .}}\n\t\t\t\t\t<a href=\"{{$page.URL}}\" target=\"frame\" class=\"{{$page.Class}}\">{{$page.Name}}</a>\n\t\t\t\t{{end}}\n\t\t\t</div>\n\t\t\t<script>\n\t\t\tvar frame = document.getElementById(\"frame\");\n\t\t\tvar shouldReload = false;\n\n\t\t\tfunction getInitialPage(){\n\t\t\t\tif (window.location.hash !== \"\"){\n\t\t\t\t\tvar url =  window.location.origin  + decodeURIComponent(window.location.hash).replace(\"#\",\"\",1);\n\t\t\t\t\tfetch(url).catch(()=> {\n\t\t\t\t\t\twindow.location.hash = \"\";\n\t\t\t\t\t\tgetInitialPage();\n\t\t\t\t\t}).then((w) => {\n\t\t\t\t\t\tif (w.ok){\n\t\t\t\t\t\t\tframe.src = url;\n\t\t\t\t\t\t\tframe.onload = setHash\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twindow.location.hash = \"\";\n\t\t\t\t\t\t\tgetInitialPage();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} else{\n\t\t\t\t\tvar all = document.getElementsByClassName(\"dropdown-content\")[0];\n\t\t\t\t\tvar url = all.children[0];\n\n\t\t\t\t\turl = getElementOrDefault(all, url, \"stacktrace\")\n\t\t\t\t\turl = getElementOrDefault(all, url, \"Info\")\n\n\t\t\t\t\tframe.src = url.href;\n\t\t\t\t\tframe.onload = setHash;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgetInitialPage()\n\n\t\t\tfunction getElementOrDefault(container, def, classname){\n\t\t\t\tvar tmp = container.getElementsByClassName(classname)\n\t\t\t\tif (tmp.length === 0){\n\t\t\t\t\treturn def;\n\t\t\t\t}\n\t\t\t\treturn tmp[0]\n\t\t\t}\n\t\t\n\t\t\tfunction setHash(){\n\t\t\t\tdocument.title = frame.contentDocument.title;\n\t\t\t\twindow.location.hash = encodeURIComponent(frame.contentDocument.location.pathname + frame.contentDocument.location.search);\n\t\t\t}\n\t\t\t\t\n\t\t\tfunction checkReload(){\n\t\t\t\tfetch(window.location.origin+\"/ok\").then((e)=>{\n\t\t\t\t\tsetTimeout(createWebsocket,100);\n\t\t\t\t}).catch((e)=>{\n\t\t\t\t\tsetTimeout(checkReload, 1000);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tfunction createWebsocket(){\n\t\t\t\tif (shouldReload){\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t}\n\t\t\t\tw = new WebSocket(\"ws://\"+window.location.host+\"/websocket\");\n\t\t\t\tw.onclose = checkReload;\n\t\t\t\tw.onmessage = ()=>{window.location.reload();}\n\t\t\t\tw.onopen = ()=>{shouldReload = true;}\n\t\t\t}\n\n\t\t\tcheckReload()\n\t\t\t\n\t\t\t</script>\n\t\t</div>\n\t</body>\n</html><html>\n<body>\n<pre>\nHeap Allocations       : {{Bytes .Alloc}}\nTotal Allocations      : {{Bytes .TotalAlloc}}\nTotal Acquired Memory  : {{Bytes .Sys}}\n\nHeap Objects Live      : {{Sub .Mallocs .Frees}}\nHeap Objects Freed     : {{.Frees}}\nHeap Objects total     : {{.Mallocs}}\n\nHeap Memory Allocation : {{Bytes .HeapAlloc}}\nHeap Memory Used       : {{Bytes .HeapInuse}}\nHeap Memory Unused     : {{Sub .HeapIdle .HeapReleased | Bytes}}\nHeap Memory Reserved   : {{Bytes .HeapSys}}\nHeap Memory Released   : {{Bytes .HeapReleased}}\n\nStack Memory Used      : {{Bytes .StackInuse}}\nStack Memory Reserved  : {{Bytes .StackSys}}\n\nNext GC At             : {{Bytes .NextGC}}\nGC CPU Usage Fraction  : {{FloatFormat64 .GCCPUFraction}}%\nCompleted GC Cycles    : {{.NumGC}}\nForced GC Cycles       : {{.NumForcedGC}}\nGC Pause Total\t       : {{Ns .PauseTotalNs}}\nGC Pause Average       : {{Div .PauseTotalNs .NumGC | Ns}}\nLast GC                : {{Time .LastGC}}\n\nGC Pauses  {{UnRingBuffer .PauseNs .NumGC}}\n</pre>\n</body>\n</html><html>\n<head>\n<title>StackTrace</title>\n</head>\n<body>\n<pre class=\"code-container\"><code>{{if .Reason}}\n{{.Reason}}\n<hr style=\"border-width: 1px;border-bottom: hidden;\">\n{{end}}{{.Stack}}</code></pre>\n</body></html><html>\n<body>\n<pre>\nMemory usage : {{Bytes .Mem}}\n\nLast GC pause  : {{Ns .LastGcPause}}\nTotal GC pause : {{Ns .GcPauseNs}}\nGC CPU usage   : {{FloatFormat64 .GcCPU}}%\n\nCurrent Threads     : {{.Threads}}\nUseable CPU cores   : {{.MaxCPU}}\nCurrent Goroutines  : {{.Goroutines}}\nAvailable CPU cores : {{.CPU}}\n\nStarted at {{TryGetTime .TimeStart .Time .TimeRunning}} (Uptime {{ToString .TimeRunning}})\nCompiled using {{.Compiler}} version {{.GoVersion}} for {{.OS}}/{{.Arch}}\n</pre>\n<hr style=\"border-width: 1px;border-bottom: hidden;\">\n</body>\n</html>"
	for i, index := range indexes {
		template.Must(Template.New(names[i]).Parse(data[index[0]:index[1]]))
	}
}
